from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from twilio.rest import Client
import time

# Twilio credentials
TWILIO_ACCOUNT_SID = 'YOUR_ACCOUNT_SID_HERE'
TWILIO_AUTH_TOKEN = 'YOUR_AUTH_TOKEN_HERE'

# Twilio WhatsApp sandbox number
TWILIO_WHATSAPP_FROM = 'whatsapp:+14155238886'

# Your WhatsApp number (with country code)
ALERT_WHATSAPP_TO = 'whatsapp:+97798XXXXXXXX'  # Replace with your WhatsApp number

# Initialize Twilio client
twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)

# Setup Selenium WebDriver
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service)

# Optional: testing override values to demo alerts (set to None to disable)
TEST_CURRENT_LEVEL = None  # Example: 85.0 to force alert
TEST_WARNING_LEVEL = None  # Example: 84.5 to force alert

def send_whatsapp(message):
    msg = twilio_client.messages.create(
        body=message,
        from_=TWILIO_WHATSAPP_FROM,
        to=ALERT_WHATSAPP_TO
    )
    print(f"WhatsApp alert sent, SID: {msg.sid}")

try:
    driver.get('https://hydrology.gov.np/#/river_watch')

    # Wait for table to load
    time.sleep(10)

    rows = driver.find_elements(By.CSS_SELECTOR, 'table tbody tr')

    found_station = False
    for row in rows:
        cols = row.find_elements(By.TAG_NAME, 'td')
        if len(cols) < 10:
            continue

        # Column mapping based on your table:
        # 0 - S.N
        # 1 - Basin Name
        # 2 - Station Index
        # 3 - Station Name
        # 4 - District
        # 5 - Current Level (Water Level m)
        # 6 - Warning Level (m)
        # 7 - Danger Level (m)
        # 8 - Trend
        # 9 - Status

        station_index = cols[2].text.strip()
        if station_index == '696.6':  # Budhikhola at Duhabi
            river_name = cols[3].text.strip()
            district = cols[4].text.strip()
            current_level_text = cols[5].text.strip()
            warning_level_text = cols[6].text.strip()
            danger_level_text = cols[7].text.strip()
            trend = cols[8].text.strip()
            status = cols[9].text.strip()

            # Parse numeric levels, use test override if set
            try:
                current_val = float(TEST_CURRENT_LEVEL) if TEST_CURRENT_LEVEL is not None else float(current_level_text.replace(',', '').strip())
                warning_val = float(TEST_WARNING_LEVEL) if TEST_WARNING_LEVEL is not None else float(warning_level_text.replace(',', '').strip())
                danger_val = float(danger_level_text.replace(',', '').strip())
            except ValueError:
                print("Invalid numeric data, skipping.")
                continue

            # Determine alert message and status for demo/testing
            if current_val >= danger_val:
                alert_status = "DANGER LEVEL ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è"
                alert_body = (
                    f"üö® *DANGER ALERT* üö®\n"
                    f"Station: {station_index}\n"
                    f"River: {river_name}\n"
                    f"District: {district}\n"
                    f"Current Level: {current_val} m\n"
                    f"Danger Level: {danger_val} m\n"
                    f"Trend: {trend}\n"
                    f"Status: {alert_status}\n"
                    f"Details: https://hydrology.gov.np/#/river_watch"
                )
            elif current_val >= warning_val:
                alert_status = "WARNING LEVEL ‚ö†Ô∏è"
                alert_body = (
                    f"‚ö†Ô∏è Warning Alert ‚ö†Ô∏è\n"
                    f"Station: {station_index}\n"
                    f"River: {river_name}\n"
                    f"District: {district}\n"
                    f"Current Level: {current_val} m\n"
                    f"Warning Level: {warning_val} m\n"
                    f"Trend: {trend}\n"
                    f"Status: {alert_status}\n"
                    f"Details: https://hydrology.gov.np/#/river_watch"
                )
            else:
                alert_status = status
                alert_body = None

            print(f"Level check: Current={current_val}, Warning={warning_val}, Danger={danger_val}, Status={alert_status}")

            found_station = True

            if alert_body:
                send_whatsapp(alert_body)
            else:
                print("No alert, level below warning.")

    if not found_station:
        print("Station 696.6 not found.")

finally:
    driver.quit()
